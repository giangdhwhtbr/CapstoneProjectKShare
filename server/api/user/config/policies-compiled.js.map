{"version":3,"sources":["policies.js"],"names":[],"mappings":";;;;AAIA;;;;;;AAKA,IAAI,MAAM,QAAQ,KAAR,CAAV;;;AAIA,MAAM,IAAI,GAAJ,CAAQ,IAAI,IAAI,aAAR,EAAR,CAAN;;AAGA,QAAQ,mBAAR,GAA8B,YAAW;AACvC,MAAI,KAAJ,CAAU,CAAC;AACT,WAAO,CAAC,OAAD,CADE;AAET,YAAQ,CAAC;AACP,iBAAW,WADJ;AAEP,mBAAa;AAFN,KAAD,EAGL;AACD,iBAAW,eADV;AAED,mBAAa;AAFZ,KAHK;AAFC,GAAD,EASR;AACA,WAAO,CAAC,QAAD,CADP;AAEA,YAAQ,CAAC;AACP,iBAAW,WADJ;AAEP,mBAAa,CAAC,KAAD;AAFN,KAAD,EAIN;AACA,iBAAW,eADX;AAEA,mBAAa,CAAC,KAAD;AAFb,KAJM;AAFR,GATQ,CAAV;AAoBD,CArBD;;;;AAyBA,QAAQ,SAAR,GAAoB,UAAU,GAAV,EAAe,GAAf,EAAoB,IAApB,EAA0B;AAC5C,MAAI,OAAQ,IAAI,IAAL,GAAa,IAAI,IAAJ,CAAS,IAAtB,GAA6B,CAAC,OAAD,CAAxC;;;AAGA,MAAI,kBAAJ,CAAuB,IAAvB,EAA6B,IAAI,KAAJ,CAAU,IAAvC,EAA6C,IAAI,MAAJ,CAAW,WAAX,EAA7C,EAAuE,UAAU,GAAV,EAAe,SAAf,EAA0B;AAC/F,QAAI,GAAJ,EAAS;;AAEP,aAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,gCAArB,CAAP;AACD,KAHD,MAGO;AACL,UAAI,SAAJ,EAAe;;AAEb,eAAO,MAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AAC1B,mBAAS;AADiB,SAArB,CAAP;AAGD;AACF;AACF,GAdD;AAeD,CAnBD","file":"policies-compiled.js","sourcesContent":["/**\n * Created by GiangDH on 5/18/16.\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar acl = require('acl');\n\n\n// Using the memory backend\nacl = new acl(new acl.memoryBackend());\n\n\nexports.invokeRolesPolicies = function() {\n  acl.allow([{\n    roles: ['admin'],\n    allows: [{\n      resources: '/api/user',\n      permissions: '*'\n    }, {\n      resources: '/api/user/:id',\n      permissions: '*'\n    }]\n  },{\n    roles: ['normal'],\n    allows: [{\n      resources: '/api/user',\n      permissions: ['get']\n    },\n      {\n      resources: '/api/user/:id',\n      permissions: ['get']\n    }]\n  }]);\n}\n/**\n * Check If Admin Policy Allows\n */\nexports.isAllowed = function (req, res, next) {\n  var role = (req.user) ? req.user.role : ['guest'];\n  // Check for user roles\n  //console.log(role);\n  acl.areAnyRolesAllowed(role, req.route.path, req.method.toLowerCase(), function (err, isAllowed) {\n    if (err) {\n      // An authorization error occurred.\n      return res.status(500).send('Unexpected authorization error');\n    } else {\n      if (isAllowed) {\n        // Access granted! Invoke next middleware\n        return next();\n      } else {\n        return res.status(403).json({\n          message: 'User is not authorized'\n        });\n      }\n    }\n  });\n};\n\n"]}