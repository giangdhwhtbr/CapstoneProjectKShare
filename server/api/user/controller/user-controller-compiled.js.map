{"version":3,"sources":["user-controller.js"],"names":[],"mappings":"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","file":"user-controller-compiled.js","sourcesContent":["\"use strict\";\nconst mongoose = require('mongoose');\nconst userDAO = require('../dao/user-dao');\nvar usera = mongoose.model('user');\n//Send Json\nvar sendJsonResponse = function(res, status, content) {\n  res.status(status);\n  res.json(content);\n};\nmodule.exports = class userController {\n  static getAll(req, res) {\n    userDAO\n      .getAll()\n      .then(user => res.status(200).json(user))\n      .catch(error => res.status(400).json(error));\n  }\n\n  static createNew(req, res) {\n    var currentDate = new Date();\n    var user = {\n      firstName : req.body.firstName,\n      lastName  : req.body.lastName,\n      displayName: req.body.displayName,\n      username: req.body.username,\n      password: req.body.password,\n      email: req.body.email,\n      role: req.body.role,\n      createdAt:currentDate,\n      updatedAt:currentDate\n    }\n    //let _user = req.body;\n    userDAO\n      .createNew(user)\n      .then(user => res.status(200).json(user))\n      .catch(error => res.status(400).json(error));\n\n  }\n\n  static updateUser(req, res){\n    if(req.params && req.params.id) {\n      var currentDate = new Date();\n        userDAO.getUserById(req.params.id)\n          .then(user => {\n            user.firstName = req.body.firstName,\n            user.lastName  = req.body.lastName,\n            user.displayName = req.body.displayName,\n            user.username = req.body.username,\n            user.password = req.body.password,\n            user.email = req.body.email,\n            user.role     = req.body.role,\n            user.updatedAt = currentDate;\n\n            //res.status(200).json(user);\n            userDAO.updateUserById(user)\n              .then(user => res.status(200).json(user))\n              .catch(error => res.status(400).json(error));\n          })\n          .catch(error => res.status(400).json(error));\n    }else{\n      res.status(404).json({\n        \"message\"    :   \"No Userid in request\"\n      });\n    }\n  }\n\n  static removeById(req, res) {\n    let _id = req.params.id;\n\n    userDAO\n      .removeById(_id)\n      .then(() => res.status(200).end())\n      .catch(error => res.status(400).json(error));\n  }\n}\n"]}