{"version":3,"sources":["user-model.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,WAAW,QAAQ,UAAR,CAAjB;AACA,IAAI,YAAY,QAAQ,WAAR,CAAhB;AACA,IAAM,SAAU,QAAQ,QAAR,CAAhB;;AAIA,IAAI,gBAAgB,SAAhB,aAAgB,CAAS,KAAT,EAAe;AACjC,SAAO,UAAU,OAAV,CAAkB,KAAlB,CAAP;AACD,CAFD;;AAIA,IAAI,eAAe,SAAf,YAAe,CAAU,IAAV,EAAgB;AACjC,MAAG,QAAQ,OAAR,IAAmB,QAAQ,SAA3B,IAAwC,QAAQ,YAAhD,IAAgE,QAAQ,QAA3E,EAAoF;AAClF,WAAO,IAAP;AACD,GAFD,MAEM;AACJ,WAAO,KAAP;AACD;AACF,CAND;;AAQA,IAAI,eAAe,SAAf,YAAe,CAAS,QAAT,EAAkB;AACnC,MAAI,UAAU,IAAI,MAAJ,CAAW,gEAAX,CAAd;AACA,SAAO,QAAQ,IAAR,CAAa,QAAb,CAAP;AACD,CAHD;AAIA,IAAM,aAAa,IAAI,SAAS,MAAb,CAAoB;AACrC,aAAW;AACT,UAAM,MADG;AAET,UAAM,IAFG;AAGT,aAAS,EAHA;AAIT,cAAU,CAAC,IAAD,EAAO,gCAAP;AAJD,GAD0B;AAOrC,YAAU;AACR,UAAM,MADE;AAER,UAAM,IAFE;AAGR,aAAS,EAHD;AAIR,cAAU,CAAC,IAAD,EAAO,+BAAP;AAJF,GAP2B;AAarC,eAAa;AACX,UAAM,MADK;AAEX,UAAM,IAFK;AAGX,aAAS,EAHE;AAIX,cAAU,CAAC,IAAD,EAAO,kCAAP;AAJC,GAbwB;AAmBrC,YAAU;AACR,UAAM,MADE;AAER,UAAM,IAFE;AAGR,YAAQ,CAAC,IAAD,EAAO,yBAAP,CAHA;AAIR,eAAW,IAJH;AAKR,aAAS,EALD;AAMR,cAAU,CAAC,IAAD,EAAO,8BAAP;AANF,GAnB2B;AA2BrC,YAAU;AACR,UAAM,MADE;AAER,UAAM,IAFE;AAGR,aAAS,EAHD;AAIR,cAAU,CAAC,IAAD,EAAO,8BAAP,CAJF;AAKR,cAAU,CAAC,YAAD,EAAe,uHAAf;AALF,GA3B2B;AAkCrC,SAAO;AACL,UAAM,MADD;AAEL,UAAM,IAFD;AAGL,YAAQ,IAHH;AAIL,eAAW,IAJN;AAKL,aAAS,EALJ;AAML,cAAU,CAAC,IAAD,EAAO,2BAAP,CANL;AAOL,cAAU,CAAC,aAAD,EAAgB,qDAAhB;AAPL,GAlC8B;AA2CrC,QAAM;AACJ,UAAM,MADF;AAEJ,UAAM,IAFF;AAGJ,aAAS,EAHL;AAIJ,cAAU,CAAC,IAAD,EAAO,oBAAP,CAJN;AAKJ,cAAU,CAAC,YAAD,EAAe,+BAAf;AALN,GA3C+B;AAkDrC,QAAM;AACJ,UAAM;AADF,GAlD+B;AAqDrC,aAAW,EAAC,MAAM,IAAP,EAAa,SAAS,KAAK,GAA3B,EArD0B;AAsDrC,aAAW,EAAC,MAAM,IAAP,EAtD0B;;AAwDrC,sBAAoB;AAClB,UAAM;AADY,GAxDiB;AA2DrC,wBAAsB;AACpB,UAAM;AADc;AA3De,CAApB,CAAnB;;;;;AAmEA,WAAW,GAAX,CAAe,MAAf,EAAuB,UAAU,IAAV,EAAgB;AACrC,MAAI,KAAK,QAAL,IAAiB,KAAK,UAAL,CAAgB,UAAhB,CAArB,EAAkD;AAChD,SAAK,IAAL,GAAY,OAAO,WAAP,CAAmB,EAAnB,EAAuB,QAAvB,CAAgC,QAAhC,CAAZ;AACA,SAAK,QAAL,GAAgB,KAAK,YAAL,CAAkB,KAAK,QAAvB,CAAhB;AACD;;AAED;AACD,CAPD;;;;;AAYA,WAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,QAAV,EAAoB;AACpD,MAAI,KAAK,IAAL,IAAa,QAAjB,EAA2B;AACzB,WAAO,OAAO,UAAP,CAAkB,QAAlB,EAA4B,IAAI,MAAJ,CAAW,KAAK,IAAhB,EAAsB,QAAtB,CAA5B,EAA6D,KAA7D,EAAoE,EAApE,EAAwE,QAAxE,CAAiF,QAAjF,CAAP;AACD,GAFD,MAEO;AACL,WAAO,QAAP;AACD;AACF,CAND;;;;;AAWA,WAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,QAAV,EAAoB;AACpD,SAAO,KAAK,QAAL,KAAkB,KAAK,YAAL,CAAkB,QAAlB,CAAzB;AACD,CAFD;;AAKA,OAAO,OAAP,GAAiB,UAAjB","file":"user-model-compiled.js","sourcesContent":["\"use strict\";\n\nconst mongoose = require('mongoose');\nvar validator = require('validator');\nconst crypto  = require('crypto');\n\n\n\nvar validateEmail = function(email){\n  return validator.isEmail(email);\n}\n\nvar validateRole = function (role) {\n  if(role == \"admin\" || role == \"manager\" || role == \"instructor\" || role == \"normal\"){\n    return true;\n  }else {\n    return false;\n  }\n}\n\nvar validatePass = function(password){\n  var pattern = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$');\n  return pattern.test(password);\n}\nconst userSchema = new mongoose.Schema({\n  firstName: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please fill in your first name']\n  },\n  lastName: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please fill in your last name']\n  },\n  displayName: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please fill in your display name']\n  },\n  username: {\n    type: String,\n    trim: true,\n    unique: [true, 'Username already exists'],\n    lowercase: true,\n    default: '',\n    required: [true, 'Please fill in your username']\n  },\n  password: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Please fill in your password'],\n    validate: [validatePass, 'password must be at least 8 characters including 1 uppercase letter, 1 special character and alphanumeric characters?']\n  },\n  email: {\n    type: String,\n    trim: true,\n    unique: true,\n    lowercase: true,\n    default: '',\n    required: [true, 'Please fill in your email'],\n    validate: [validateEmail, \"Email is not in the right form, let check it again!\"]\n  },\n  role: {\n    type: String,\n    trim: true,\n    default: '',\n    required: [true, 'Role can not blank'],\n    validate: [validateRole, \"Role is not valid, try again!\"]\n  },\n  salt: {\n    type: String,\n  },\n  createdAt: {type: Date, default: Date.now},\n  updatedAt: {type: Date},\n  /* For reset password */\n  resetPasswordToken: {\n    type: String\n  },\n  resetPasswordExpires: {\n    type: Date\n  }\n});\n\n/**\n * Hook a pre save method to hash the password\n */\nuserSchema.pre('save', function (next) {\n  if (this.password && this.isModified('password')) {\n    this.salt = crypto.randomBytes(16).toString('base64');\n    this.password = this.hashPassword(this.password);\n  }\n\n  next();\n});\n\n/**\n * Create instance method for hashing a password\n */\nuserSchema.methods.hashPassword = function (password) {\n  if (this.salt && password) {\n    return crypto.pbkdf2Sync(password, new Buffer(this.salt, 'base64'), 10000, 64).toString('base64');\n  } else {\n    return password;\n  }\n};\n\n/**\n * Create instance method for authenticating user\n */\nuserSchema.methods.authenticate = function (password) {\n  return this.password === this.hashPassword(password);\n};\n\n\nmodule.exports = userSchema;\n"]}