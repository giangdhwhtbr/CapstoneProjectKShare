/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		1:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".chunk.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "https://localhost:3333/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n * Created by GiangDH on 6/8/16.\n */\nimport 'core-js/es6';\nimport 'reflect-metadata';\n__webpack_require__(2);\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development\n  Error['stackTraceLimit'] = Infinity;\n  __webpack_require__(3);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NsaWVudC9kZXYvcG9seWZpbGxzLnRzPzdjZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IEdpYW5nREggb24gNi84LzE2LlxuICovXG5pbXBvcnQgJ2NvcmUtanMvZXM2JztcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5yZXF1aXJlKCd6b25lLmpzL2Rpc3Qvem9uZScpO1xuaWYgKHByb2Nlc3MuZW52LkVOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIFByb2R1Y3Rpb25cbn0gZWxzZSB7XG4gIC8vIERldmVsb3BtZW50XG4gIEVycm9yWydzdGFja1RyYWNlTGltaXQnXSA9IEluZmluaXR5O1xuICByZXF1aXJlKCd6b25lLmpzL2Rpc3QvbG9uZy1zdGFjay10cmFjZS16b25lJyk7XG59XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vY2xpZW50L2Rldi9wb2x5ZmlsbHMudHNcbiAqKiBtb2R1bGUgaWQgPSAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDFcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcHJvY2Vzcy9icm93c2VyLmpzPzgyZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDFcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t__webpack_require__(1);\n\tvar event_target_1 = __webpack_require__(2);\n\tvar define_property_1 = __webpack_require__(4);\n\tvar register_element_1 = __webpack_require__(5);\n\tvar property_descriptor_1 = __webpack_require__(6);\n\tvar timers_1 = __webpack_require__(8);\n\tvar utils_1 = __webpack_require__(3);\n\tvar set = 'set';\n\tvar clear = 'clear';\n\tvar blockingMethods = ['alert', 'prompt', 'confirm'];\n\tvar _global = typeof window == 'undefined' ? global : window;\n\ttimers_1.patchTimer(_global, set, clear, 'Timeout');\n\ttimers_1.patchTimer(_global, set, clear, 'Interval');\n\ttimers_1.patchTimer(_global, set, clear, 'Immediate');\n\ttimers_1.patchTimer(_global, 'request', 'cancelMacroTask', 'AnimationFrame');\n\ttimers_1.patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n\ttimers_1.patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n\tfor (var i = 0; i < blockingMethods.length; i++) {\n\t    var name = blockingMethods[i];\n\t    utils_1.patchMethod(_global, name, function (delegate, symbol, name) {\n\t        return function (s, args) {\n\t            return Zone.current.run(delegate, _global, args, name);\n\t        };\n\t    });\n\t}\n\tevent_target_1.eventTargetPatch(_global);\n\tproperty_descriptor_1.propertyDescriptorPatch(_global);\n\tutils_1.patchClass('MutationObserver');\n\tutils_1.patchClass('WebKitMutationObserver');\n\tutils_1.patchClass('FileReader');\n\tdefine_property_1.propertyPatch();\n\tregister_element_1.registerElementPatch(_global);\n\t// Treat XMLHTTPRequest as a macrotask.\n\tpatchXHR(_global);\n\tvar XHR_TASK = utils_1.zoneSymbol('xhrTask');\n\tfunction patchXHR(window) {\n\t    function findPendingTask(target) {\n\t        var pendingTask = target[XHR_TASK];\n\t        return pendingTask;\n\t    }\n\t    function scheduleTask(task) {\n\t        var data = task.data;\n\t        data.target.addEventListener('readystatechange', function () {\n\t            if (data.target.readyState === XMLHttpRequest.DONE) {\n\t                if (!data.aborted) {\n\t                    task.invoke();\n\t                }\n\t            }\n\t        });\n\t        var storedTask = data.target[XHR_TASK];\n\t        if (!storedTask) {\n\t            data.target[XHR_TASK] = task;\n\t        }\n\t        setNative.apply(data.target, data.args);\n\t        return task;\n\t    }\n\t    function placeholderCallback() {\n\t    }\n\t    function clearTask(task) {\n\t        var data = task.data;\n\t        // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n\t        // to prevent it from firing. So instead, we store info for the event listener.\n\t        data.aborted = true;\n\t        return clearNative.apply(data.target, data.args);\n\t    }\n\t    var setNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {\n\t        var zone = Zone.current;\n\t        var options = {\n\t            target: self,\n\t            isPeriodic: false,\n\t            delay: null,\n\t            args: args,\n\t            aborted: false\n\t        };\n\t        return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);\n\t    }; });\n\t    var clearNative = utils_1.patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {\n\t        var task = findPendingTask(self);\n\t        if (task && typeof task.type == 'string') {\n\t            // If the XHR has already completed, do nothing.\n\t            if (task.cancelFn == null) {\n\t                return;\n\t            }\n\t            task.zone.cancelTask(task);\n\t        }\n\t        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task to cancel. Do nothing.\n\t    }; });\n\t}\n\t/// GEO_LOCATION\n\tif (_global['navigator'] && _global['navigator'].geolocation) {\n\t    utils_1.patchPrototype(_global['navigator'].geolocation, [\n\t        'getCurrentPosition',\n\t        'watchPosition'\n\t    ]);\n\t}\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {;\n\t;\n\tvar Zone = (function (global) {\n\t    var Zone = (function () {\n\t        function Zone(parent, zoneSpec) {\n\t            this._properties = null;\n\t            this._parent = parent;\n\t            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n\t            this._properties = zoneSpec && zoneSpec.properties || {};\n\t            this._zoneDelegate = new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n\t        }\n\t        Object.defineProperty(Zone, \"current\", {\n\t            get: function () { return _currentZone; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(Zone, \"currentTask\", {\n\t            get: function () { return _currentTask; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(Zone.prototype, \"parent\", {\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(Zone.prototype, \"name\", {\n\t            get: function () { return this._name; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Zone.prototype.get = function (key) {\n\t            var current = this;\n\t            while (current) {\n\t                if (current._properties.hasOwnProperty(key)) {\n\t                    return current._properties[key];\n\t                }\n\t                current = current._parent;\n\t            }\n\t        };\n\t        Zone.prototype.fork = function (zoneSpec) {\n\t            if (!zoneSpec)\n\t                throw new Error('ZoneSpec required!');\n\t            return this._zoneDelegate.fork(this, zoneSpec);\n\t        };\n\t        Zone.prototype.wrap = function (callback, source) {\n\t            if (typeof callback !== 'function') {\n\t                throw new Error('Expecting function got: ' + callback);\n\t            }\n\t            var _callback = this._zoneDelegate.intercept(this, callback, source);\n\t            var zone = this;\n\t            return function () {\n\t                return zone.runGuarded(_callback, this, arguments, source);\n\t            };\n\t        };\n\t        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\n\t            if (applyThis === void 0) { applyThis = null; }\n\t            if (applyArgs === void 0) { applyArgs = null; }\n\t            if (source === void 0) { source = null; }\n\t            var oldZone = _currentZone;\n\t            _currentZone = this;\n\t            try {\n\t                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n\t            }\n\t            finally {\n\t                _currentZone = oldZone;\n\t            }\n\t        };\n\t        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\n\t            if (applyThis === void 0) { applyThis = null; }\n\t            if (applyArgs === void 0) { applyArgs = null; }\n\t            if (source === void 0) { source = null; }\n\t            var oldZone = _currentZone;\n\t            _currentZone = this;\n\t            try {\n\t                try {\n\t                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n\t                }\n\t                catch (error) {\n\t                    if (this._zoneDelegate.handleError(this, error)) {\n\t                        throw error;\n\t                    }\n\t                }\n\t            }\n\t            finally {\n\t                _currentZone = oldZone;\n\t            }\n\t        };\n\t        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\n\t            task.runCount++;\n\t            if (task.zone != this)\n\t                throw new Error('A task can only be run in the zone which created it! (Creation: ' +\n\t                    task.zone.name + '; Execution: ' + this.name + ')');\n\t            var previousTask = _currentTask;\n\t            _currentTask = task;\n\t            var oldZone = _currentZone;\n\t            _currentZone = this;\n\t            try {\n\t                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {\n\t                    task.cancelFn = null;\n\t                }\n\t                try {\n\t                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n\t                }\n\t                catch (error) {\n\t                    if (this._zoneDelegate.handleError(this, error)) {\n\t                        throw error;\n\t                    }\n\t                }\n\t            }\n\t            finally {\n\t                _currentZone = oldZone;\n\t                _currentTask = previousTask;\n\t            }\n\t        };\n\t        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\n\t            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));\n\t        };\n\t        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\n\t            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));\n\t        };\n\t        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\n\t            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));\n\t        };\n\t        Zone.prototype.cancelTask = function (task) {\n\t            var value = this._zoneDelegate.cancelTask(this, task);\n\t            task.runCount = -1;\n\t            task.cancelFn = null;\n\t            return value;\n\t        };\n\t        Zone.__symbol__ = __symbol__;\n\t        return Zone;\n\t    }());\n\t    ;\n\t    var ZoneDelegate = (function () {\n\t        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\n\t            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };\n\t            this.zone = zone;\n\t            this._parentDelegate = parentDelegate;\n\t            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n\t            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n\t            this._interceptZS = zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n\t            this._interceptDlgt = zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n\t            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n\t            this._invokeDlgt = zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n\t            this._handleErrorZS = zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n\t            this._handleErrorDlgt = zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n\t            this._scheduleTaskZS = zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n\t            this._scheduleTaskDlgt = zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n\t            this._invokeTaskZS = zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n\t            this._invokeTaskDlgt = zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n\t            this._cancelTaskZS = zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n\t            this._cancelTaskDlgt = zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n\t            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);\n\t            this._hasTaskDlgt = zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);\n\t        }\n\t        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\n\t            return this._forkZS\n\t                ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec)\n\t                : new Zone(targetZone, zoneSpec);\n\t        };\n\t        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\n\t            return this._interceptZS\n\t                ? this._interceptZS.onIntercept(this._interceptDlgt, this.zone, targetZone, callback, source)\n\t                : callback;\n\t        };\n\t        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\n\t            return this._invokeZS\n\t                ? this._invokeZS.onInvoke(this._invokeDlgt, this.zone, targetZone, callback, applyThis, applyArgs, source)\n\t                : callback.apply(applyThis, applyArgs);\n\t        };\n\t        ZoneDelegate.prototype.handleError = function (targetZone, error) {\n\t            return this._handleErrorZS\n\t                ? this._handleErrorZS.onHandleError(this._handleErrorDlgt, this.zone, targetZone, error)\n\t                : true;\n\t        };\n\t        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\n\t            try {\n\t                if (this._scheduleTaskZS) {\n\t                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this.zone, targetZone, task);\n\t                }\n\t                else if (task.scheduleFn) {\n\t                    task.scheduleFn(task);\n\t                }\n\t                else if (task.type == 'microTask') {\n\t                    scheduleMicroTask(task);\n\t                }\n\t                else {\n\t                    throw new Error('Task is missing scheduleFn.');\n\t                }\n\t                return task;\n\t            }\n\t            finally {\n\t                if (targetZone == this.zone) {\n\t                    this._updateTaskCount(task.type, 1);\n\t                }\n\t            }\n\t        };\n\t        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\n\t            try {\n\t                return this._invokeTaskZS\n\t                    ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs)\n\t                    : task.callback.apply(applyThis, applyArgs);\n\t            }\n\t            finally {\n\t                if (targetZone == this.zone && (task.type != 'eventTask') && !(task.data && task.data.isPeriodic)) {\n\t                    this._updateTaskCount(task.type, -1);\n\t                }\n\t            }\n\t        };\n\t        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\n\t            var value;\n\t            if (this._cancelTaskZS) {\n\t                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this.zone, targetZone, task);\n\t            }\n\t            else if (!task.cancelFn) {\n\t                throw new Error('Task does not support cancellation, or is already canceled.');\n\t            }\n\t            else {\n\t                value = task.cancelFn(task);\n\t            }\n\t            if (targetZone == this.zone) {\n\t                // this should not be in the finally block, because exceptions assume not canceled.\n\t                this._updateTaskCount(task.type, -1);\n\t            }\n\t            return value;\n\t        };\n\t        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\n\t            return this._hasTaskZS && this._hasTaskZS.onHasTask(this._hasTaskDlgt, this.zone, targetZone, isEmpty);\n\t        };\n\t        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\n\t            var counts = this._taskCounts;\n\t            var prev = counts[type];\n\t            var next = counts[type] = prev + count;\n\t            if (next < 0) {\n\t                throw new Error('More tasks executed then were scheduled.');\n\t            }\n\t            if (prev == 0 || next == 0) {\n\t                var isEmpty = {\n\t                    microTask: counts.microTask > 0,\n\t                    macroTask: counts.macroTask > 0,\n\t                    eventTask: counts.eventTask > 0,\n\t                    change: type\n\t                };\n\t                try {\n\t                    this.hasTask(this.zone, isEmpty);\n\t                }\n\t                finally {\n\t                    if (this._parentDelegate) {\n\t                        this._parentDelegate._updateTaskCount(type, count);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        return ZoneDelegate;\n\t    }());\n\t    var ZoneTask = (function () {\n\t        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {\n\t            this.runCount = 0;\n\t            this.type = type;\n\t            this.zone = zone;\n\t            this.source = source;\n\t            this.data = options;\n\t            this.scheduleFn = scheduleFn;\n\t            this.cancelFn = cancelFn;\n\t            this.callback = callback;\n\t            var self = this;\n\t            this.invoke = function () {\n\t                try {\n\t                    return zone.runTask(self, this, arguments);\n\t                }\n\t                finally {\n\t                    drainMicroTaskQueue();\n\t                }\n\t            };\n\t        }\n\t        return ZoneTask;\n\t    }());\n\t    function __symbol__(name) { return '__zone_symbol__' + name; }\n\t    ;\n\t    var symbolSetTimeout = __symbol__('setTimeout');\n\t    var symbolPromise = __symbol__('Promise');\n\t    var symbolThen = __symbol__('then');\n\t    var _currentZone = new Zone(null, null);\n\t    var _currentTask = null;\n\t    var _microTaskQueue = [];\n\t    var _isDrainingMicrotaskQueue = false;\n\t    var _uncaughtPromiseErrors = [];\n\t    var _drainScheduled = false;\n\t    function scheduleQueueDrain() {\n\t        if (!_drainScheduled && !_currentTask && _microTaskQueue.length == 0) {\n\t            // We are not running in Task, so we need to kickstart the microtask queue.\n\t            if (global[symbolPromise]) {\n\t                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);\n\t            }\n\t            else {\n\t                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n\t            }\n\t        }\n\t    }\n\t    function scheduleMicroTask(task) {\n\t        scheduleQueueDrain();\n\t        _microTaskQueue.push(task);\n\t    }\n\t    function consoleError(e) {\n\t        var rejection = e && e.rejection;\n\t        if (rejection) {\n\t            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection);\n\t        }\n\t        console.error(e);\n\t    }\n\t    function drainMicroTaskQueue() {\n\t        if (!_isDrainingMicrotaskQueue) {\n\t            _isDrainingMicrotaskQueue = true;\n\t            while (_microTaskQueue.length) {\n\t                var queue = _microTaskQueue;\n\t                _microTaskQueue = [];\n\t                for (var i = 0; i < queue.length; i++) {\n\t                    var task = queue[i];\n\t                    try {\n\t                        task.zone.runTask(task, null, null);\n\t                    }\n\t                    catch (e) {\n\t                        consoleError(e);\n\t                    }\n\t                }\n\t            }\n\t            while (_uncaughtPromiseErrors.length) {\n\t                var uncaughtPromiseErrors = _uncaughtPromiseErrors;\n\t                _uncaughtPromiseErrors = [];\n\t                var _loop_1 = function(i) {\n\t                    var uncaughtPromiseError = uncaughtPromiseErrors[i];\n\t                    try {\n\t                        uncaughtPromiseError.zone.runGuarded(function () { throw uncaughtPromiseError; });\n\t                    }\n\t                    catch (e) {\n\t                        consoleError(e);\n\t                    }\n\t                };\n\t                for (var i = 0; i < uncaughtPromiseErrors.length; i++) {\n\t                    _loop_1(i);\n\t                }\n\t            }\n\t            _isDrainingMicrotaskQueue = false;\n\t            _drainScheduled = false;\n\t        }\n\t    }\n\t    function isThenable(value) {\n\t        return value && value.then;\n\t    }\n\t    function forwardResolution(value) { return value; }\n\t    function forwardRejection(rejection) { return ZoneAwarePromise.reject(rejection); }\n\t    var symbolState = __symbol__('state');\n\t    var symbolValue = __symbol__('value');\n\t    var source = 'Promise.then';\n\t    var UNRESOLVED = null;\n\t    var RESOLVED = true;\n\t    var REJECTED = false;\n\t    var REJECTED_NO_CATCH = 0;\n\t    function makeResolver(promise, state) {\n\t        return function (v) {\n\t            resolvePromise(promise, state, v);\n\t            // Do not return value or you will break the Promise spec.\n\t        };\n\t    }\n\t    function resolvePromise(promise, state, value) {\n\t        if (promise[symbolState] === UNRESOLVED) {\n\t            if (value instanceof ZoneAwarePromise && value[symbolState] !== UNRESOLVED) {\n\t                clearRejectedNoCatch(value);\n\t                resolvePromise(promise, value[symbolState], value[symbolValue]);\n\t            }\n\t            else if (isThenable(value)) {\n\t                value.then(makeResolver(promise, state), makeResolver(promise, false));\n\t            }\n\t            else {\n\t                promise[symbolState] = state;\n\t                var queue = promise[symbolValue];\n\t                promise[symbolValue] = value;\n\t                for (var i = 0; i < queue.length;) {\n\t                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n\t                }\n\t                if (queue.length == 0 && state == REJECTED) {\n\t                    promise[symbolState] = REJECTED_NO_CATCH;\n\t                    try {\n\t                        throw new Error(\"Uncaught (in promise): \" + value);\n\t                    }\n\t                    catch (e) {\n\t                        var error = e;\n\t                        error.rejection = value;\n\t                        error.promise = promise;\n\t                        error.zone = Zone.current;\n\t                        error.task = Zone.currentTask;\n\t                        _uncaughtPromiseErrors.push(error);\n\t                        scheduleQueueDrain();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // Resolving an already resolved promise is a noop.\n\t        return promise;\n\t    }\n\t    function clearRejectedNoCatch(promise) {\n\t        if (promise[symbolState] === REJECTED_NO_CATCH) {\n\t            promise[symbolState] = REJECTED;\n\t            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\n\t                if (promise === _uncaughtPromiseErrors[i].promise) {\n\t                    _uncaughtPromiseErrors.splice(i, 1);\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n\t        clearRejectedNoCatch(promise);\n\t        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;\n\t        zone.scheduleMicroTask(source, function () {\n\t            try {\n\t                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));\n\t            }\n\t            catch (error) {\n\t                resolvePromise(chainPromise, false, error);\n\t            }\n\t        });\n\t    }\n\t    var ZoneAwarePromise = (function () {\n\t        function ZoneAwarePromise(executor) {\n\t            var promise = this;\n\t            promise[symbolState] = UNRESOLVED;\n\t            promise[symbolValue] = []; // queue;\n\t            try {\n\t                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n\t            }\n\t            catch (e) {\n\t                resolvePromise(promise, false, e);\n\t            }\n\t        }\n\t        ZoneAwarePromise.resolve = function (value) {\n\t            return resolvePromise(new this(null), RESOLVED, value);\n\t        };\n\t        ZoneAwarePromise.reject = function (error) {\n\t            return resolvePromise(new this(null), REJECTED, error);\n\t        };\n\t        ZoneAwarePromise.race = function (values) {\n\t            var resolve;\n\t            var reject;\n\t            var promise = new this(function (res, rej) { resolve = res; reject = rej; });\n\t            function onResolve(value) { promise && (promise = null || resolve(value)); }\n\t            function onReject(error) { promise && (promise = null || reject(error)); }\n\t            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n\t                var value = values_1[_i];\n\t                if (!isThenable(value)) {\n\t                    value = this.resolve(value);\n\t                }\n\t                value.then(onResolve, onReject);\n\t            }\n\t            return promise;\n\t        };\n\t        ZoneAwarePromise.all = function (values) {\n\t            var resolve;\n\t            var reject;\n\t            var promise = new this(function (res, rej) { resolve = res; reject = rej; });\n\t            var count = 0;\n\t            var resolvedValues = [];\n\t            function onReject(error) { promise && reject(error); promise = null; }\n\t            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {\n\t                var value = values_2[_i];\n\t                if (!isThenable(value)) {\n\t                    value = this.resolve(value);\n\t                }\n\t                value.then((function (index) { return function (value) {\n\t                    resolvedValues[index] = value;\n\t                    count--;\n\t                    if (promise && !count) {\n\t                        resolve(resolvedValues);\n\t                    }\n\t                    promise == null;\n\t                }; })(count), onReject);\n\t                count++;\n\t            }\n\t            if (!count)\n\t                resolve(resolvedValues);\n\t            return promise;\n\t        };\n\t        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\n\t            var chainPromise = new ZoneAwarePromise(null);\n\t            var zone = Zone.current;\n\t            if (this[symbolState] == UNRESOLVED) {\n\t                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n\t            }\n\t            else {\n\t                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n\t            }\n\t            return chainPromise;\n\t        };\n\t        ZoneAwarePromise.prototype.catch = function (onRejected) {\n\t            return this.then(null, onRejected);\n\t        };\n\t        return ZoneAwarePromise;\n\t    }());\n\t    var NativePromise = global[__symbol__('Promise')] = global.Promise;\n\t    global.Promise = ZoneAwarePromise;\n\t    if (NativePromise) {\n\t        var NativePromiseProtototype = NativePromise.prototype;\n\t        var NativePromiseThen_1 = NativePromiseProtototype[__symbol__('then')]\n\t            = NativePromiseProtototype.then;\n\t        NativePromiseProtototype.then = function (onResolve, onReject) {\n\t            var nativePromise = this;\n\t            return new ZoneAwarePromise(function (resolve, reject) {\n\t                NativePromiseThen_1.call(nativePromise, resolve, reject);\n\t            }).then(onResolve, onReject);\n\t        };\n\t    }\n\t    return global.Zone = Zone;\n\t})(typeof window === 'undefined' ? global : window);\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar utils_1 = __webpack_require__(3);\n\tvar WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';\n\tvar NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex'.split(',');\n\tvar EVENT_TARGET = 'EventTarget';\n\tfunction eventTargetPatch(_global) {\n\t    var apis = [];\n\t    var isWtf = _global['wtf'];\n\t    if (isWtf) {\n\t        // Workaround for: https://github.com/google/tracing-framework/issues/555\n\t        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);\n\t    }\n\t    else if (_global[EVENT_TARGET]) {\n\t        apis.push(EVENT_TARGET);\n\t    }\n\t    else {\n\t        // Note: EventTarget is not available in all browsers,\n\t        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget\n\t        apis = NO_EVENT_TARGET;\n\t    }\n\t    for (var i = 0; i < apis.length; i++) {\n\t        var type = _global[apis[i]];\n\t        utils_1.patchEventTargetMethods(type && type.prototype);\n\t    }\n\t}\n\texports.eventTargetPatch = eventTargetPatch;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * Suppress closure compiler errors about unknown 'process' variable\n\t * @fileoverview\n\t * @suppress {undefinedVars}\n\t */\n\t\"use strict\";\n\texports.zoneSymbol = Zone['__symbol__'];\n\tvar _global = typeof window == 'undefined' ? global : window;\n\tfunction bindArguments(args, source) {\n\t    for (var i = args.length - 1; i >= 0; i--) {\n\t        if (typeof args[i] === 'function') {\n\t            args[i] = Zone.current.wrap(args[i], source + '_' + i);\n\t        }\n\t    }\n\t    return args;\n\t}\n\texports.bindArguments = bindArguments;\n\t;\n\tfunction patchPrototype(prototype, fnNames) {\n\t    var source = prototype.constructor['name'];\n\t    var _loop_1 = function(i) {\n\t        var name_1 = fnNames[i];\n\t        var delegate = prototype[name_1];\n\t        if (delegate) {\n\t            prototype[name_1] = (function (delegate) {\n\t                return function () {\n\t                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));\n\t                };\n\t            })(delegate);\n\t        }\n\t    };\n\t    for (var i = 0; i < fnNames.length; i++) {\n\t        _loop_1(i);\n\t    }\n\t}\n\texports.patchPrototype = patchPrototype;\n\t;\n\texports.isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n\texports.isNode = (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]');\n\texports.isBrowser = !exports.isNode && !exports.isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);\n\tfunction patchProperty(obj, prop) {\n\t    var desc = Object.getOwnPropertyDescriptor(obj, prop) || {\n\t        enumerable: true,\n\t        configurable: true\n\t    };\n\t    // A property descriptor cannot have getter/setter and be writable\n\t    // deleting the writable and value properties avoids this error:\n\t    //\n\t    // TypeError: property descriptors must not specify a value or be writable when a\n\t    // getter or setter has been specified\n\t    delete desc.writable;\n\t    delete desc.value;\n\t    // substr(2) cuz 'onclick' -> 'click', etc\n\t    var eventName = prop.substr(2);\n\t    var _prop = '_' + prop;\n\t    desc.set = function (fn) {\n\t        if (this[_prop]) {\n\t            this.removeEventListener(eventName, this[_prop]);\n\t        }\n\t        if (typeof fn === 'function') {\n\t            var wrapFn = function (event) {\n\t                var result;\n\t                result = fn.apply(this, arguments);\n\t                if (result != undefined && !result)\n\t                    event.preventDefault();\n\t            };\n\t            this[_prop] = wrapFn;\n\t            this.addEventListener(eventName, wrapFn, false);\n\t        }\n\t        else {\n\t            this[_prop] = null;\n\t        }\n\t    };\n\t    desc.get = function () {\n\t        return this[_prop];\n\t    };\n\t    Object.defineProperty(obj, prop, desc);\n\t}\n\texports.patchProperty = patchProperty;\n\t;\n\tfunction patchOnProperties(obj, properties) {\n\t    var onProperties = [];\n\t    for (var prop in obj) {\n\t        if (prop.substr(0, 2) == 'on') {\n\t            onProperties.push(prop);\n\t        }\n\t    }\n\t    for (var j = 0; j < onProperties.length; j++) {\n\t        patchProperty(obj, onProperties[j]);\n\t    }\n\t    if (properties) {\n\t        for (var i = 0; i < properties.length; i++) {\n\t            patchProperty(obj, 'on' + properties[i]);\n\t        }\n\t    }\n\t}\n\texports.patchOnProperties = patchOnProperties;\n\t;\n\tvar EVENT_TASKS = exports.zoneSymbol('eventTasks');\n\tvar ADD_EVENT_LISTENER = 'addEventListener';\n\tvar REMOVE_EVENT_LISTENER = 'removeEventListener';\n\tvar SYMBOL_ADD_EVENT_LISTENER = exports.zoneSymbol(ADD_EVENT_LISTENER);\n\tvar SYMBOL_REMOVE_EVENT_LISTENER = exports.zoneSymbol(REMOVE_EVENT_LISTENER);\n\tfunction findExistingRegisteredTask(target, handler, name, capture, remove) {\n\t    var eventTasks = target[EVENT_TASKS];\n\t    if (eventTasks) {\n\t        for (var i = 0; i < eventTasks.length; i++) {\n\t            var eventTask = eventTasks[i];\n\t            var data = eventTask.data;\n\t            if (data.handler === handler\n\t                && data.useCapturing === capture\n\t                && data.eventName === name) {\n\t                if (remove) {\n\t                    eventTasks.splice(i, 1);\n\t                }\n\t                return eventTask;\n\t            }\n\t        }\n\t    }\n\t    return null;\n\t}\n\tfunction attachRegisteredEvent(target, eventTask) {\n\t    var eventTasks = target[EVENT_TASKS];\n\t    if (!eventTasks) {\n\t        eventTasks = target[EVENT_TASKS] = [];\n\t    }\n\t    eventTasks.push(eventTask);\n\t}\n\tfunction scheduleEventListener(eventTask) {\n\t    var meta = eventTask.data;\n\t    attachRegisteredEvent(meta.target, eventTask);\n\t    return meta.target[SYMBOL_ADD_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);\n\t}\n\tfunction cancelEventListener(eventTask) {\n\t    var meta = eventTask.data;\n\t    findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);\n\t    meta.target[SYMBOL_REMOVE_EVENT_LISTENER](meta.eventName, eventTask.invoke, meta.useCapturing);\n\t}\n\tfunction zoneAwareAddEventListener(self, args) {\n\t    var eventName = args[0];\n\t    var handler = args[1];\n\t    var useCapturing = args[2] || false;\n\t    // - Inside a Web Worker, `this` is undefined, the context is `global`\n\t    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\n\t    // see https://github.com/angular/zone.js/issues/190\n\t    var target = self || _global;\n\t    var delegate = null;\n\t    if (typeof handler == 'function') {\n\t        delegate = handler;\n\t    }\n\t    else if (handler && handler.handleEvent) {\n\t        delegate = function (event) { return handler.handleEvent(event); };\n\t    }\n\t    var validZoneHandler = false;\n\t    try {\n\t        // In cross site contexts (such as WebDriver frameworks like Selenium),\n\t        // accessing the handler object here will cause an exception to be thrown which\n\t        // will fail tests prematurely.\n\t        validZoneHandler = handler && handler.toString() === \"[object FunctionWrapper]\";\n\t    }\n\t    catch (e) {\n\t        // Returning nothing here is fine, because objects in a cross-site context are unusable\n\t        return;\n\t    }\n\t    // Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150\n\t    if (!delegate || validZoneHandler) {\n\t        return target[SYMBOL_ADD_EVENT_LISTENER](eventName, handler, useCapturing);\n\t    }\n\t    var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, false);\n\t    if (eventTask) {\n\t        // we already registered, so this will have noop.\n\t        return target[SYMBOL_ADD_EVENT_LISTENER](eventName, eventTask.invoke, useCapturing);\n\t    }\n\t    var zone = Zone.current;\n\t    var source = target.constructor['name'] + '.addEventListener:' + eventName;\n\t    var data = {\n\t        target: target,\n\t        eventName: eventName,\n\t        name: eventName,\n\t        useCapturing: useCapturing,\n\t        handler: handler\n\t    };\n\t    zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);\n\t}\n\tfunction zoneAwareRemoveEventListener(self, args) {\n\t    var eventName = args[0];\n\t    var handler = args[1];\n\t    var useCapturing = args[2] || false;\n\t    // - Inside a Web Worker, `this` is undefined, the context is `global`\n\t    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined\n\t    // see https://github.com/angular/zone.js/issues/190\n\t    var target = self || _global;\n\t    var eventTask = findExistingRegisteredTask(target, handler, eventName, useCapturing, true);\n\t    if (eventTask) {\n\t        eventTask.zone.cancelTask(eventTask);\n\t    }\n\t    else {\n\t        target[SYMBOL_REMOVE_EVENT_LISTENER](eventName, handler, useCapturing);\n\t    }\n\t}\n\tfunction patchEventTargetMethods(obj) {\n\t    if (obj && obj.addEventListener) {\n\t        patchMethod(obj, ADD_EVENT_LISTENER, function () { return zoneAwareAddEventListener; });\n\t        patchMethod(obj, REMOVE_EVENT_LISTENER, function () { return zoneAwareRemoveEventListener; });\n\t        return true;\n\t    }\n\t    else {\n\t        return false;\n\t    }\n\t}\n\texports.patchEventTargetMethods = patchEventTargetMethods;\n\t;\n\tvar originalInstanceKey = exports.zoneSymbol('originalInstance');\n\t// wrap some native API on `window`\n\tfunction patchClass(className) {\n\t    var OriginalClass = _global[className];\n\t    if (!OriginalClass)\n\t        return;\n\t    _global[className] = function () {\n\t        var a = bindArguments(arguments, className);\n\t        switch (a.length) {\n\t            case 0:\n\t                this[originalInstanceKey] = new OriginalClass();\n\t                break;\n\t            case 1:\n\t                this[originalInstanceKey] = new OriginalClass(a[0]);\n\t                break;\n\t            case 2:\n\t                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n\t                break;\n\t            case 3:\n\t                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n\t                break;\n\t            case 4:\n\t                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n\t                break;\n\t            default: throw new Error('Arg list too long.');\n\t        }\n\t    };\n\t    var instance = new OriginalClass(function () { });\n\t    var prop;\n\t    for (prop in instance) {\n\t        (function (prop) {\n\t            if (typeof instance[prop] === 'function') {\n\t                _global[className].prototype[prop] = function () {\n\t                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n\t                };\n\t            }\n\t            else {\n\t                Object.defineProperty(_global[className].prototype, prop, {\n\t                    set: function (fn) {\n\t                        if (typeof fn === 'function') {\n\t                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);\n\t                        }\n\t                        else {\n\t                            this[originalInstanceKey][prop] = fn;\n\t                        }\n\t                    },\n\t                    get: function () {\n\t                        return this[originalInstanceKey][prop];\n\t                    }\n\t                });\n\t            }\n\t        }(prop));\n\t    }\n\t    for (prop in OriginalClass) {\n\t        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n\t            _global[className][prop] = OriginalClass[prop];\n\t        }\n\t    }\n\t}\n\texports.patchClass = patchClass;\n\t;\n\tfunction createNamedFn(name, delegate) {\n\t    try {\n\t        return (Function('f', \"return function \" + name + \"(){return f(this, arguments)}\"))(delegate);\n\t    }\n\t    catch (e) {\n\t        // if we fail, we must be CSP, just return delegate.\n\t        return function () {\n\t            return delegate(this, arguments);\n\t        };\n\t    }\n\t}\n\texports.createNamedFn = createNamedFn;\n\tfunction patchMethod(target, name, patchFn) {\n\t    var proto = target;\n\t    while (proto && !proto.hasOwnProperty(name)) {\n\t        proto = Object.getPrototypeOf(proto);\n\t    }\n\t    if (!proto && target[name]) {\n\t        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n\t        proto = target;\n\t    }\n\t    var delegateName = exports.zoneSymbol(name);\n\t    var delegate;\n\t    if (proto && !(delegate = proto[delegateName])) {\n\t        delegate = proto[delegateName] = proto[name];\n\t        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));\n\t    }\n\t    return delegate;\n\t}\n\texports.patchMethod = patchMethod;\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar utils_1 = __webpack_require__(3);\n\t/*\n\t * This is necessary for Chrome and Chrome mobile, to enable\n\t * things like redefining `createdCallback` on an element.\n\t */\n\tvar _defineProperty = Object.defineProperty;\n\tvar _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\tvar _create = Object.create;\n\tvar unconfigurablesKey = utils_1.zoneSymbol('unconfigurables');\n\tfunction propertyPatch() {\n\t    Object.defineProperty = function (obj, prop, desc) {\n\t        if (isUnconfigurable(obj, prop)) {\n\t            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\n\t        }\n\t        if (prop !== 'prototype') {\n\t            desc = rewriteDescriptor(obj, prop, desc);\n\t        }\n\t        return _defineProperty(obj, prop, desc);\n\t    };\n\t    Object.defineProperties = function (obj, props) {\n\t        Object.keys(props).forEach(function (prop) {\n\t            Object.defineProperty(obj, prop, props[prop]);\n\t        });\n\t        return obj;\n\t    };\n\t    Object.create = function (obj, proto) {\n\t        if (typeof proto === 'object') {\n\t            Object.keys(proto).forEach(function (prop) {\n\t                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\n\t            });\n\t        }\n\t        return _create(obj, proto);\n\t    };\n\t    Object.getOwnPropertyDescriptor = function (obj, prop) {\n\t        var desc = _getOwnPropertyDescriptor(obj, prop);\n\t        if (isUnconfigurable(obj, prop)) {\n\t            desc.configurable = false;\n\t        }\n\t        return desc;\n\t    };\n\t}\n\texports.propertyPatch = propertyPatch;\n\t;\n\tfunction _redefineProperty(obj, prop, desc) {\n\t    desc = rewriteDescriptor(obj, prop, desc);\n\t    return _defineProperty(obj, prop, desc);\n\t}\n\texports._redefineProperty = _redefineProperty;\n\t;\n\tfunction isUnconfigurable(obj, prop) {\n\t    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\n\t}\n\tfunction rewriteDescriptor(obj, prop, desc) {\n\t    desc.configurable = true;\n\t    if (!desc.configurable) {\n\t        if (!obj[unconfigurablesKey]) {\n\t            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\n\t        }\n\t        obj[unconfigurablesKey][prop] = true;\n\t    }\n\t    return desc;\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar define_property_1 = __webpack_require__(4);\n\tvar utils_1 = __webpack_require__(3);\n\tfunction registerElementPatch(_global) {\n\t    if (!utils_1.isBrowser || !('registerElement' in _global.document)) {\n\t        return;\n\t    }\n\t    var _registerElement = document.registerElement;\n\t    var callbacks = [\n\t        'createdCallback',\n\t        'attachedCallback',\n\t        'detachedCallback',\n\t        'attributeChangedCallback'\n\t    ];\n\t    document.registerElement = function (name, opts) {\n\t        if (opts && opts.prototype) {\n\t            callbacks.forEach(function (callback) {\n\t                var source = 'Document.registerElement::' + callback;\n\t                if (opts.prototype.hasOwnProperty(callback)) {\n\t                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);\n\t                    if (descriptor && descriptor.value) {\n\t                        descriptor.value = Zone.current.wrap(descriptor.value, source);\n\t                        define_property_1._redefineProperty(opts.prototype, callback, descriptor);\n\t                    }\n\t                    else {\n\t                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n\t                    }\n\t                }\n\t                else if (opts.prototype[callback]) {\n\t                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n\t                }\n\t            });\n\t        }\n\t        return _registerElement.apply(document, [name, opts]);\n\t    };\n\t}\n\texports.registerElementPatch = registerElementPatch;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar webSocketPatch = __webpack_require__(7);\n\tvar utils_1 = __webpack_require__(3);\n\tvar eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');\n\tfunction propertyDescriptorPatch(_global) {\n\t    if (utils_1.isNode) {\n\t        return;\n\t    }\n\t    var supportsWebSocket = typeof WebSocket !== 'undefined';\n\t    if (canPatchViaPropertyDescriptor()) {\n\t        // for browsers that we can patch the descriptor:  Chrome & Firefox\n\t        if (utils_1.isBrowser) {\n\t            utils_1.patchOnProperties(HTMLElement.prototype, eventNames);\n\t        }\n\t        utils_1.patchOnProperties(XMLHttpRequest.prototype, null);\n\t        if (typeof IDBIndex !== 'undefined') {\n\t            utils_1.patchOnProperties(IDBIndex.prototype, null);\n\t            utils_1.patchOnProperties(IDBRequest.prototype, null);\n\t            utils_1.patchOnProperties(IDBOpenDBRequest.prototype, null);\n\t            utils_1.patchOnProperties(IDBDatabase.prototype, null);\n\t            utils_1.patchOnProperties(IDBTransaction.prototype, null);\n\t            utils_1.patchOnProperties(IDBCursor.prototype, null);\n\t        }\n\t        if (supportsWebSocket) {\n\t            utils_1.patchOnProperties(WebSocket.prototype, null);\n\t        }\n\t    }\n\t    else {\n\t        // Safari, Android browsers (Jelly Bean)\n\t        patchViaCapturingAllTheEvents();\n\t        utils_1.patchClass('XMLHttpRequest');\n\t        if (supportsWebSocket) {\n\t            webSocketPatch.apply(_global);\n\t        }\n\t    }\n\t}\n\texports.propertyDescriptorPatch = propertyDescriptorPatch;\n\tfunction canPatchViaPropertyDescriptor() {\n\t    if (utils_1.isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick')\n\t        && typeof Element !== 'undefined') {\n\t        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364\n\t        // IDL interface attributes are not configurable\n\t        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');\n\t        if (desc && !desc.configurable)\n\t            return false;\n\t    }\n\t    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n\t        get: function () {\n\t            return true;\n\t        }\n\t    });\n\t    var req = new XMLHttpRequest();\n\t    var result = !!req.onreadystatechange;\n\t    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {});\n\t    return result;\n\t}\n\t;\n\tvar unboundKey = utils_1.zoneSymbol('unbound');\n\t// Whenever any eventListener fires, we check the eventListener target and all parents\n\t// for `onwhatever` properties and replace them with zone-bound functions\n\t// - Chrome (for now)\n\tfunction patchViaCapturingAllTheEvents() {\n\t    var _loop_1 = function(i) {\n\t        var property = eventNames[i];\n\t        var onproperty = 'on' + property;\n\t        document.addEventListener(property, function (event) {\n\t            var elt = event.target, bound, source;\n\t            if (elt) {\n\t                source = elt.constructor['name'] + '.' + onproperty;\n\t            }\n\t            else {\n\t                source = 'unknown.' + onproperty;\n\t            }\n\t            while (elt) {\n\t                if (elt[onproperty] && !elt[onproperty][unboundKey]) {\n\t                    bound = Zone.current.wrap(elt[onproperty], source);\n\t                    bound[unboundKey] = elt[onproperty];\n\t                    elt[onproperty] = bound;\n\t                }\n\t                elt = elt.parentElement;\n\t            }\n\t        }, true);\n\t    };\n\t    for (var i = 0; i < eventNames.length; i++) {\n\t        _loop_1(i);\n\t    }\n\t    ;\n\t}\n\t;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar utils_1 = __webpack_require__(3);\n\t// we have to patch the instance since the proto is non-configurable\n\tfunction apply(_global) {\n\t    var WS = _global.WebSocket;\n\t    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener\n\t    // On older Chrome, no need since EventTarget was already patched\n\t    if (!_global.EventTarget) {\n\t        utils_1.patchEventTargetMethods(WS.prototype);\n\t    }\n\t    _global.WebSocket = function (a, b) {\n\t        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);\n\t        var proxySocket;\n\t        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance\n\t        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');\n\t        if (onmessageDesc && onmessageDesc.configurable === false) {\n\t            proxySocket = Object.create(socket);\n\t            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {\n\t                proxySocket[propName] = function () {\n\t                    return socket[propName].apply(socket, arguments);\n\t                };\n\t            });\n\t        }\n\t        else {\n\t            // we can patch the real socket\n\t            proxySocket = socket;\n\t        }\n\t        utils_1.patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);\n\t        return proxySocket;\n\t    };\n\t    for (var prop in WS) {\n\t        _global.WebSocket[prop] = WS[prop];\n\t    }\n\t}\n\texports.apply = apply;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar utils_1 = __webpack_require__(3);\n\tfunction patchTimer(window, setName, cancelName, nameSuffix) {\n\t    var setNative = null;\n\t    var clearNative = null;\n\t    setName += nameSuffix;\n\t    cancelName += nameSuffix;\n\t    function scheduleTask(task) {\n\t        var data = task.data;\n\t        data.args[0] = task.invoke;\n\t        data.handleId = setNative.apply(window, data.args);\n\t        return task;\n\t    }\n\t    function clearTask(task) {\n\t        return clearNative(task.data.handleId);\n\t    }\n\t    setNative = utils_1.patchMethod(window, setName, function (delegate) { return function (self, args) {\n\t        if (typeof args[0] === 'function') {\n\t            var zone = Zone.current;\n\t            var options = {\n\t                handleId: null,\n\t                isPeriodic: nameSuffix === 'Interval',\n\t                delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,\n\t                args: args\n\t            };\n\t            return zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\n\t        }\n\t        else {\n\t            // cause an error by calling it directly.\n\t            return delegate.apply(window, args);\n\t        }\n\t    }; });\n\t    clearNative = utils_1.patchMethod(window, cancelName, function (delegate) { return function (self, args) {\n\t        var task = args[0];\n\t        if (task && typeof task.type === 'string') {\n\t            if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {\n\t                // Do not cancel already canceled functions\n\t                task.zone.cancelTask(task);\n\t            }\n\t        }\n\t        else {\n\t            // cause an error by calling it directly.\n\t            delegate.apply(window, args);\n\t        }\n\t    }; });\n\t}\n\texports.patchTimer = patchTimer;\n\n\n/***/ }\n/******/ ]);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t(function () {\n\t    var NEWLINE = '\\n';\n\t    var SEP = '  -------------  ';\n\t    var IGNORE_FRAMES = [];\n\t    var creationTrace = '__creationTrace__';\n\t    var LongStackTrace = (function () {\n\t        function LongStackTrace() {\n\t            this.error = getStacktrace();\n\t            this.timestamp = new Date();\n\t        }\n\t        return LongStackTrace;\n\t    }());\n\t    function getStacktraceWithUncaughtError() {\n\t        return new Error('STACKTRACE TRACKING');\n\t    }\n\t    function getStacktraceWithCaughtError() {\n\t        try {\n\t            throw getStacktraceWithUncaughtError();\n\t        }\n\t        catch (e) {\n\t            return e;\n\t        }\n\t    }\n\t    // Some implementations of exception handling don't create a stack trace if the exception\n\t    // isn't thrown, however it's faster not to actually throw the exception.\n\t    var error = getStacktraceWithUncaughtError();\n\t    var coughtError = getStacktraceWithCaughtError();\n\t    var getStacktrace = error.stack\n\t        ? getStacktraceWithUncaughtError\n\t        : (coughtError.stack ? getStacktraceWithCaughtError : getStacktraceWithUncaughtError);\n\t    function getFrames(error) {\n\t        return error.stack ? error.stack.split(NEWLINE) : [];\n\t    }\n\t    function addErrorStack(lines, error) {\n\t        var trace = getFrames(error);\n\t        for (var i = 0; i < trace.length; i++) {\n\t            var frame = trace[i];\n\t            // Filter out the Frames which are part of stack capturing.\n\t            if (!(i < IGNORE_FRAMES.length && IGNORE_FRAMES[i] === frame)) {\n\t                lines.push(trace[i]);\n\t            }\n\t        }\n\t    }\n\t    function renderLongStackTrace(frames, stack) {\n\t        var longTrace = [stack];\n\t        if (frames) {\n\t            var timestamp = new Date().getTime();\n\t            for (var i = 0; i < frames.length; i++) {\n\t                var traceFrames = frames[i];\n\t                var lastTime = traceFrames.timestamp;\n\t                longTrace.push(SEP + \" Elapsed: \" + (timestamp - lastTime.getTime()) + \" ms; At: \" + lastTime + \" \" + SEP);\n\t                addErrorStack(longTrace, traceFrames.error);\n\t                timestamp = lastTime.getTime();\n\t            }\n\t        }\n\t        return longTrace.join(NEWLINE);\n\t    }\n\t    Zone['longStackTraceZoneSpec'] = {\n\t        name: 'long-stack-trace',\n\t        longStackTraceLimit: 10,\n\t        onScheduleTask: function (parentZoneDelegate, currentZone, targetZone, task) {\n\t            var currentTask = Zone.currentTask;\n\t            var trace = currentTask && currentTask.data && currentTask.data[creationTrace] || [];\n\t            trace = [new LongStackTrace()].concat(trace);\n\t            if (trace.length > this.longStackTraceLimit) {\n\t                trace.length = this.longStackTraceLimit;\n\t            }\n\t            if (!task.data)\n\t                task.data = {};\n\t            task.data[creationTrace] = trace;\n\t            return parentZoneDelegate.scheduleTask(targetZone, task);\n\t        },\n\t        onHandleError: function (parentZoneDelegate, currentZone, targetZone, error) {\n\t            var parentTask = Zone.currentTask;\n\t            if (error instanceof Error && parentTask) {\n\t                var descriptor = Object.getOwnPropertyDescriptor(error, 'stack');\n\t                if (descriptor) {\n\t                    var delegateGet_1 = descriptor.get;\n\t                    var value_1 = descriptor.value;\n\t                    descriptor = {\n\t                        get: function () {\n\t                            return renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], delegateGet_1 ? delegateGet_1.apply(this) : value_1);\n\t                        }\n\t                    };\n\t                    Object.defineProperty(error, 'stack', descriptor);\n\t                }\n\t                else {\n\t                    error.stack = renderLongStackTrace(parentTask.data && parentTask.data[creationTrace], error.stack);\n\t                }\n\t            }\n\t            return parentZoneDelegate.handleError(targetZone, error);\n\t        }\n\t    };\n\t    function captureStackTraces(stackTraces, count) {\n\t        if (count > 0) {\n\t            stackTraces.push(getFrames((new LongStackTrace()).error));\n\t            captureStackTraces(stackTraces, count - 1);\n\t        }\n\t    }\n\t    function computeIgnoreFrames() {\n\t        var frames = [];\n\t        captureStackTraces(frames, 2);\n\t        var frames1 = frames[0];\n\t        var frames2 = frames[1];\n\t        for (var i = 0; i < frames1.length; i++) {\n\t            var frame1 = frames1[i];\n\t            var frame2 = frames2[i];\n\t            if (frame1 === frame2) {\n\t                IGNORE_FRAMES.push(frame1);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t    computeIgnoreFrames();\n\t})();\n\n\n/***/ }\n/******/ ]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vem9uZS5qcy9kaXN0L2xvbmctc3RhY2stdHJhY2Utem9uZS5qcz9mY2MzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgTkVXTElORSA9ICdcXG4nO1xuXHQgICAgdmFyIFNFUCA9ICcgIC0tLS0tLS0tLS0tLS0gICc7XG5cdCAgICB2YXIgSUdOT1JFX0ZSQU1FUyA9IFtdO1xuXHQgICAgdmFyIGNyZWF0aW9uVHJhY2UgPSAnX19jcmVhdGlvblRyYWNlX18nO1xuXHQgICAgdmFyIExvbmdTdGFja1RyYWNlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBMb25nU3RhY2tUcmFjZSgpIHtcblx0ICAgICAgICAgICAgdGhpcy5lcnJvciA9IGdldFN0YWNrdHJhY2UoKTtcblx0ICAgICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gTG9uZ1N0YWNrVHJhY2U7XG5cdCAgICB9KCkpO1xuXHQgICAgZnVuY3Rpb24gZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKCkge1xuXHQgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1NUQUNLVFJBQ0UgVFJBQ0tJTkcnKTtcblx0ICAgIH1cblx0ICAgIGZ1bmN0aW9uIGdldFN0YWNrdHJhY2VXaXRoQ2F1Z2h0RXJyb3IoKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdGhyb3cgZ2V0U3RhY2t0cmFjZVdpdGhVbmNhdWdodEVycm9yKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIC8vIFNvbWUgaW1wbGVtZW50YXRpb25zIG9mIGV4Y2VwdGlvbiBoYW5kbGluZyBkb24ndCBjcmVhdGUgYSBzdGFjayB0cmFjZSBpZiB0aGUgZXhjZXB0aW9uXG5cdCAgICAvLyBpc24ndCB0aHJvd24sIGhvd2V2ZXIgaXQncyBmYXN0ZXIgbm90IHRvIGFjdHVhbGx5IHRocm93IHRoZSBleGNlcHRpb24uXG5cdCAgICB2YXIgZXJyb3IgPSBnZXRTdGFja3RyYWNlV2l0aFVuY2F1Z2h0RXJyb3IoKTtcblx0ICAgIHZhciBjb3VnaHRFcnJvciA9IGdldFN0YWNrdHJhY2VXaXRoQ2F1Z2h0RXJyb3IoKTtcblx0ICAgIHZhciBnZXRTdGFja3RyYWNlID0gZXJyb3Iuc3RhY2tcblx0ICAgICAgICA/IGdldFN0YWNrdHJhY2VXaXRoVW5jYXVnaHRFcnJvclxuXHQgICAgICAgIDogKGNvdWdodEVycm9yLnN0YWNrID8gZ2V0U3RhY2t0cmFjZVdpdGhDYXVnaHRFcnJvciA6IGdldFN0YWNrdHJhY2VXaXRoVW5jYXVnaHRFcnJvcik7XG5cdCAgICBmdW5jdGlvbiBnZXRGcmFtZXMoZXJyb3IpIHtcblx0ICAgICAgICByZXR1cm4gZXJyb3Iuc3RhY2sgPyBlcnJvci5zdGFjay5zcGxpdChORVdMSU5FKSA6IFtdO1xuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gYWRkRXJyb3JTdGFjayhsaW5lcywgZXJyb3IpIHtcblx0ICAgICAgICB2YXIgdHJhY2UgPSBnZXRGcmFtZXMoZXJyb3IpO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2UubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGZyYW1lID0gdHJhY2VbaV07XG5cdCAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgdGhlIEZyYW1lcyB3aGljaCBhcmUgcGFydCBvZiBzdGFjayBjYXB0dXJpbmcuXG5cdCAgICAgICAgICAgIGlmICghKGkgPCBJR05PUkVfRlJBTUVTLmxlbmd0aCAmJiBJR05PUkVfRlJBTUVTW2ldID09PSBmcmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIGxpbmVzLnB1c2godHJhY2VbaV0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gcmVuZGVyTG9uZ1N0YWNrVHJhY2UoZnJhbWVzLCBzdGFjaykge1xuXHQgICAgICAgIHZhciBsb25nVHJhY2UgPSBbc3RhY2tdO1xuXHQgICAgICAgIGlmIChmcmFtZXMpIHtcblx0ICAgICAgICAgICAgdmFyIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHRyYWNlRnJhbWVzID0gZnJhbWVzW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhc3RUaW1lID0gdHJhY2VGcmFtZXMudGltZXN0YW1wO1xuXHQgICAgICAgICAgICAgICAgbG9uZ1RyYWNlLnB1c2goU0VQICsgXCIgRWxhcHNlZDogXCIgKyAodGltZXN0YW1wIC0gbGFzdFRpbWUuZ2V0VGltZSgpKSArIFwiIG1zOyBBdDogXCIgKyBsYXN0VGltZSArIFwiIFwiICsgU0VQKTtcblx0ICAgICAgICAgICAgICAgIGFkZEVycm9yU3RhY2sobG9uZ1RyYWNlLCB0cmFjZUZyYW1lcy5lcnJvcik7XG5cdCAgICAgICAgICAgICAgICB0aW1lc3RhbXAgPSBsYXN0VGltZS5nZXRUaW1lKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxvbmdUcmFjZS5qb2luKE5FV0xJTkUpO1xuXHQgICAgfVxuXHQgICAgWm9uZVsnbG9uZ1N0YWNrVHJhY2Vab25lU3BlYyddID0ge1xuXHQgICAgICAgIG5hbWU6ICdsb25nLXN0YWNrLXRyYWNlJyxcblx0ICAgICAgICBsb25nU3RhY2tUcmFjZUxpbWl0OiAxMCxcblx0ICAgICAgICBvblNjaGVkdWxlVGFzazogZnVuY3Rpb24gKHBhcmVudFpvbmVEZWxlZ2F0ZSwgY3VycmVudFpvbmUsIHRhcmdldFpvbmUsIHRhc2spIHtcblx0ICAgICAgICAgICAgdmFyIGN1cnJlbnRUYXNrID0gWm9uZS5jdXJyZW50VGFzaztcblx0ICAgICAgICAgICAgdmFyIHRyYWNlID0gY3VycmVudFRhc2sgJiYgY3VycmVudFRhc2suZGF0YSAmJiBjdXJyZW50VGFzay5kYXRhW2NyZWF0aW9uVHJhY2VdIHx8IFtdO1xuXHQgICAgICAgICAgICB0cmFjZSA9IFtuZXcgTG9uZ1N0YWNrVHJhY2UoKV0uY29uY2F0KHRyYWNlKTtcblx0ICAgICAgICAgICAgaWYgKHRyYWNlLmxlbmd0aCA+IHRoaXMubG9uZ1N0YWNrVHJhY2VMaW1pdCkge1xuXHQgICAgICAgICAgICAgICAgdHJhY2UubGVuZ3RoID0gdGhpcy5sb25nU3RhY2tUcmFjZUxpbWl0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghdGFzay5kYXRhKVxuXHQgICAgICAgICAgICAgICAgdGFzay5kYXRhID0ge307XG5cdCAgICAgICAgICAgIHRhc2suZGF0YVtjcmVhdGlvblRyYWNlXSA9IHRyYWNlO1xuXHQgICAgICAgICAgICByZXR1cm4gcGFyZW50Wm9uZURlbGVnYXRlLnNjaGVkdWxlVGFzayh0YXJnZXRab25lLCB0YXNrKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIG9uSGFuZGxlRXJyb3I6IGZ1bmN0aW9uIChwYXJlbnRab25lRGVsZWdhdGUsIGN1cnJlbnRab25lLCB0YXJnZXRab25lLCBlcnJvcikge1xuXHQgICAgICAgICAgICB2YXIgcGFyZW50VGFzayA9IFpvbmUuY3VycmVudFRhc2s7XG5cdCAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIHBhcmVudFRhc2spIHtcblx0ICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlcnJvciwgJ3N0YWNrJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkZWxlZ2F0ZUdldF8xID0gZGVzY3JpcHRvci5nZXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlXzEgPSBkZXNjcmlwdG9yLnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckxvbmdTdGFja1RyYWNlKHBhcmVudFRhc2suZGF0YSAmJiBwYXJlbnRUYXNrLmRhdGFbY3JlYXRpb25UcmFjZV0sIGRlbGVnYXRlR2V0XzEgPyBkZWxlZ2F0ZUdldF8xLmFwcGx5KHRoaXMpIDogdmFsdWVfMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywgZGVzY3JpcHRvcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBlcnJvci5zdGFjayA9IHJlbmRlckxvbmdTdGFja1RyYWNlKHBhcmVudFRhc2suZGF0YSAmJiBwYXJlbnRUYXNrLmRhdGFbY3JlYXRpb25UcmFjZV0sIGVycm9yLnN0YWNrKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gcGFyZW50Wm9uZURlbGVnYXRlLmhhbmRsZUVycm9yKHRhcmdldFpvbmUsIGVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgZnVuY3Rpb24gY2FwdHVyZVN0YWNrVHJhY2VzKHN0YWNrVHJhY2VzLCBjb3VudCkge1xuXHQgICAgICAgIGlmIChjb3VudCA+IDApIHtcblx0ICAgICAgICAgICAgc3RhY2tUcmFjZXMucHVzaChnZXRGcmFtZXMoKG5ldyBMb25nU3RhY2tUcmFjZSgpKS5lcnJvcikpO1xuXHQgICAgICAgICAgICBjYXB0dXJlU3RhY2tUcmFjZXMoc3RhY2tUcmFjZXMsIGNvdW50IC0gMSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgZnVuY3Rpb24gY29tcHV0ZUlnbm9yZUZyYW1lcygpIHtcblx0ICAgICAgICB2YXIgZnJhbWVzID0gW107XG5cdCAgICAgICAgY2FwdHVyZVN0YWNrVHJhY2VzKGZyYW1lcywgMik7XG5cdCAgICAgICAgdmFyIGZyYW1lczEgPSBmcmFtZXNbMF07XG5cdCAgICAgICAgdmFyIGZyYW1lczIgPSBmcmFtZXNbMV07XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFtZXMxLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBmcmFtZTEgPSBmcmFtZXMxW2ldO1xuXHQgICAgICAgICAgICB2YXIgZnJhbWUyID0gZnJhbWVzMltpXTtcblx0ICAgICAgICAgICAgaWYgKGZyYW1lMSA9PT0gZnJhbWUyKSB7XG5cdCAgICAgICAgICAgICAgICBJR05PUkVfRlJBTUVTLnB1c2goZnJhbWUxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgY29tcHV0ZUlnbm9yZUZyYW1lcygpO1xuXHR9KSgpO1xuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3pvbmUuanMvZGlzdC9sb25nLXN0YWNrLXRyYWNlLXpvbmUuanNcbiAqKiBtb2R1bGUgaWQgPSAzXG4gKiogbW9kdWxlIGNodW5rcyA9IDFcbiAqKi8iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);